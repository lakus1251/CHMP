import numpy as np
from math import factorial
import matplotlib.pyplot as plt


x=[0.15,0.20,0.25,0.30,0.35,0.40,0.45,0.50,0.55,0.60,0.65]
y=[0.8607,0.8187,0.7788,0.7408,0.7046,0.6703,0.6376,0.6065,0.5769,0.5488,0.522]
h = x[1] - x[0]
x1=0.223
x2=0.554
q=(x1 - x[0])/h #Для 1 інтерп. ф-ли Нтютона
q1 = (x2-x[-1])/h #Для 2 інтерп. ф-ли Нтютона
def n(y,j): #обчислення кінцевих різниць
    mas=[]
    for i in range(len(y)):
        mas.append(y[i] - y[i-1])
    mas.pop(0)  
    if j == 1:
        return mas
    else:
        j-=1
        return n(mas, j)
 #Перша інтерполяційна формула Ньютона   
s_1 = y[0]+q*n(y,1)[0]+q*(q-1)*n(y,2)[0]/factorial(2)
s_2 = q*(q-1)*(q-2)*n(y,3)[0]/factorial(3)
s_3 = q*(q-1)*(q-2)*(q-3)*n(y,4)[0]/factorial(4)
s_4 = q*(q-1)*(q-2)*(q-3)*(q-4)*n(y,5)[0]/factorial(5)
n_1 = s_1 + s_2 + s_3 + s_4

#Спроба обчислити n_1 через цикл
#n_1=y[0] 
#for  k in range(len(y)):
#    prod = (q-k)*n(y,k+1)[0]/factorial(k+1)
#    n_1=n_1 + q*prod
print ('The value of a function at a point x1=', x1, 'using Newton*s First Interpolation Formula', round(n_1,5))
